name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" "$PREV_TAG"..HEAD)
          else
            CHANGELOG="Initial release"
          fi
          
          # Write to file for release body
          cat > release_notes.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          \`\`\`toml
          [dependencies]
          clap-mcp = "${{ steps.get_version.outputs.version }}"
          \`\`\`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ github.ref_name }}
          EOF
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-
            ${{ runner.os }}-cargo-
      
      - name: Check version matches tag
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
      
      - name: Publish clap-mcp-derive
        run: |
          cd clap-mcp-derive
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
          cd ..
      
      - name: Wait for crates.io to index
        run: sleep 30
      
      - name: Publish clap-mcp
        run: |
          cd clap-mcp
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: calculator
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: calculator.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: calculator
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: calculator
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build release binary
        run: cargo build --release --example calculator --target ${{ matrix.target }}
      
      - name: Create archive
        shell: bash
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/examples/${{ matrix.binary_name }}"
          ARCHIVE_NAME="clap-mcp-calculator-${{ needs.create-release.outputs.version }}-${{ matrix.target }}"
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$ARCHIVE_NAME.zip" "$BINARY_PATH"
            echo "ASSET_PATH=$ARCHIVE_NAME.zip" >> $GITHUB_ENV
          else
            tar czf "$ARCHIVE_NAME.tar.gz" -C "target/${{ matrix.target }}/release/examples" "${{ matrix.binary_name }}"
            echo "ASSET_PATH=$ARCHIVE_NAME.tar.gz" >> $GITHUB_ENV
          fi
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
          asset_content_type: application/octet-stream